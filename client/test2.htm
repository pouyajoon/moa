<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>Tiles à la Google Maps: Coordinates, Tile Bounds and Projection - conversion to EPSG:900913 (EPSG:3785) and EPSG:4326 (WGS84)</title>
		<meta name="author" content="Klokan Petr Přidal" >
		<meta http-equiv="content-type" content="text/html; charset=UTF-8" >
		<style type="text/css">
@import url("http://www.google.com/uds/css/gsearch.css");
@import url("http://www.google.com/uds/solutions/localsearch/gmlocalsearch.css");
body {
	color: #444;
	background: #fff url(/img/title_bg.png) 0 -80px repeat-x;
	margin: 20px;
	font-family: trebuchet ms,luxi sans,sans-serif;
	font-size: 96%;
}
h1 img, h2 img, h3 img, h4 img 
{
	margin-right: 6px;
	vertical-align: middle;
}
h1, h2, h3, h4, h5 {
	color: #222;
	clear: both;
}
h2 {
	margin-bottom: 5px;
}
a {
	text-decoration: none;
}
a:link {
	color: #66e;
}
a:visited {
	color: #a6a;
}
a:active {
	color: #fff !important;
	background-color: #f50;
}
a:hover {
	color: #f50;
	text-decoration: underline;
}
a img {
	border: 0;
	vertical-align: middle;
}
#main {
	border: solid black 1px;
}
#left {
	float: left;
	width: 350px;
	padding-right: 20px;
}
#right {
	float: right;
	width: 380px;
	padding-left: 40px;
	padding-bottom: 20px;
	text-align: left;
	border-left: 3px solid #aaaaaa;
}
#maptilerlogo {
        background: url('/img/icon256.png') no-repeat;
        width:256px;
	height:256px;
	margin-left: auto;
	margin-right: auto;
}
		</style>
<!--[if gte IE 5]>
<style type="text/css">
#maptilerlogo {
background:none;
filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='img/icon256.png', sizingMethod='crop');
}
</style>
<![endif]-->
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAA9pSslyaYyyl6x8HKrHAZvxRsOxCJZhZCphUeunjEI5Fy6-CXvhTrtF3uiGcIcU-LL76FI-4uXYSsMw" type="text/javascript"></script> 
    <script src="http://www.google.com/uds/api?file=uds.js&amp;v=1.0&amp;key=ABQIAAAA9pSslyaYyyl6x8HKrHAZvxRsOxCJZhZCphUeunjEI5Fy6-CXvhTrtF3uiGcIcU-LL76FI-4uXYSsMw" type="text/javascript"></script>

    <script src="http://www.google.com/uds/solutions/localsearch/gmlocalsearch.js" type="text/javascript"></script>
    <script type="text/javascript">

    function TileToQuadKey ( x, y, zoom){ 
        var quad = ""; 
        for (var i = zoom; i > 0; i--){
    	var mask = 1 << (i - 1); 
    	var cell = 0; 
    	if ((x & mask) != 0) 
    	    cell++; 
    	if ((y & mask) != 0) 
    	    cell += 2; 
    	quad += cell; 
        } 
        return quad; 
    }

    function roundNumber(num, dec) {
	return Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);
    }
    function r3(num) {
        return roundNumber(num,3);
    }

    function initialize() {
      if (GBrowserIsCompatible()) {

				v
        var currentProjection = G_NORMAL_MAP.getProjection();

        var tilelayer = new GTileLayer(new GCopyrightCollection(""));
        tilelayer.getTileUrl = function(tile, zoom) { 
	  var imageurl3 = "http://chart.apis.google.com/chart?chst=d_text_outline&chs=256x256&chf=bg,s,00000055&chld=FFFFFF|16|h|000000|b|";
	  var imageurl4 = "http://chart.apis.google.com/chart?chst=d_text_outline&chs=256x256&chf=bg,s,ffffff00&chld=FFFFFF|16|h|000000|b|";
	  var tilegoogle = " (" + tile.x + "," + tile.y +")";
	  //var tilegoogle = " x:" + tile.x + " y:" + tile.y +" z:" + zoom;
	  var tiletms = " (" + tile.x + "," + ((1 << zoom) - tile.y - 1) + ")";
          var tilequadtree = " " +TileToQuadKey( tile.x, tile.y, zoom);
          /*
	  var boundspixels = tile.x*256 + " " + tile.y*256 + " " + (tile.x+1)*256 + " " + (tile.y+1)*256;
          latlng1 = currentProjection.fromPixelToLatLng(new GPoint(tile.x*256,tile.y*256), zoom);
          latlng2 = currentProjection.fromPixelToLatLng(new GPoint((tile.x+1)*256,(tile.y+1)*256), zoom);
          var boundswgs84 = r3(latlng1.lng())+" "+r3(latlng1.lat())+" "+r3(latlng2.lng())+" "+r3(latlng2.lat());
          var boundsmercator = "";
	  */	
          if ((tile.x % 2 && !(tile.y % 2)) || (!(tile.x % 2) && tile.y % 2)) {
	    imageurl = imageurl3;
	  } else { 
	    imageurl = imageurl4;
          }
	  return imageurl + "|||Google: "+tilegoogle+"|TMS: "+tiletms+"|QuadTree: "+tilequadtree + "|Zoom "+zoom+"||||||____________________________";
	  //return imageurl + "== TILE COORDINATES == |Google zoom "+zoom+": "+tilegoogle+"|TMS zoom "+zoom+": "+tiletms+"|QuadTree: "+tilequadtree+"||== TILE BOUNDS ==|Pixels at zoom "+zoom+":|"+boundspixels+"|WGS84 Datum:|" + boundswgs84;
        };
        tilelayer.isPng = function() { return true;};

        var myTileLayer = new GTileLayerOverlay(tilelayer);
      
        var map = new GMap2(document.getElementById("map_canvas"));
        map.setCenter(new GLatLng(0, 0), 1);
	map.addMapType(G_PHYSICAL_MAP);
        map.addControl(new GLargeMapControl());
        map.addControl(new GHierarchicalMapTypeControl());
        map.addControl(new google.maps.LocalSearch({
              resultList : google.maps.LocalSearch.RESULT_LIST_SUPPRESS,
              suppressInitialResultSelection : true
       }));

        map.addOverlay(myTileLayer);


        GEvent.addListener(map,"click", function(overlay,latlng) {
          if (overlay) {
            // ignore if we click on the info window
            return;
          }
          var tile = new GPoint();
          var point = new GPoint();
	  var zoom = map.getZoom();
          point = currentProjection.fromLatLngToPixel(latlng, zoom);
//          tile.x = Math.floor(point.x / 256);
//          tile.y = Math.floor(point.y / 256);
          tile.x = 1062498; 
          tile.y = 721635;
				console.log(tile);
				zoom = 21;
	  var boundspixels = tile.x*256 + " " + tile.y*256 + " " + (tile.x+1)*256 + " " + (tile.y+1)*256;

          latlng1 = currentProjection.fromPixelToLatLng(new GPoint(tile.x*256,(tile.y+1)*256), zoom);
          latlng2 = currentProjection.fromPixelToLatLng(new GPoint((tile.x+1)*256,tile.y*256), zoom);
          var boundswgs84 = latlng1.lng()+" "+latlng1.lat()+"<br/>"+latlng2.lng()+" "+latlng2.lat();
					console.log(boundswgs84);

          initialResolution = 2 * Math.PI * 6378137 / 256;  // == 156543.0339
          originShift = 2 * Math.PI * 6378137 / 2.0; // == 20037508.34
	  res = initialResolution / Math.pow(2, zoom);
          tile.y = ((1 << zoom) - tile.y - 1); // TMS
          var boundsmercator =  (tile.x*256 * res - originShift) + " " + (tile.y*256 * res - originShift) +
          "<br/>" + ((tile.x+1)*256 * res - originShift) + " " + ((tile.y+1)*256 * res - originShift);

	  var myHtml = "<b>== Tile Boundaries ==</b><br/>"+
            "<div style='padding-top:7px'><b>WGS84 datum (longitude/latitude):</b><br>" + boundswgs84 + "</div>" +
            "<div style='padding-top:7px'><b>Spherical Mercator (meters):</b><br/>" + boundsmercator + "</div>" +
            "<div style='padding-top:7px'><b>Pixels at zoom "+zoom+":</b><br/>" + boundspixels + "</div>";
          map.openInfoWindow(latlng, myHtml);
        });
      }
    }
    </script>
	</head>
  <body onload="initialize()" onunload="GUnload()">

    <div style="margin-left: auto; margin-right: auto; text-align: center; width: 920px;">
	<h1>Tiles à la Google Maps: Coordinates, Tile Bounds and Projection</h1>
	<p>

	Click on a tile to display the numerical boundaries...
        <div id="map_canvas" style="width: 640px; height: 512px; margin-left: auto; margin-right: auto;"></div>
	<p>

	<h2>Addressing tiles: same tile bounds with different indexes</h2>

<p align="left">
Google Maps, Microsoft Virtual Earth, Yahoo Maps, and other commercial API providers as well as OpenStreetMap and OpenAerialMap are using the same projection and tiling profile and tiles are therefore compatible.
The extents of all tiles as well as the zoom levels (resolution in meters per pixel)
are predefined for the whole Earth.<br>
Difference is only in the way how the equivalent tiles are indexed. There are three main systems of tile adressing: Google XYZ, Microsoft QuadTree and from the open-source world comming TMS (Tile Map Service).<p>
</p>

<div style="text-align:left; width:650px; margin: 0px auto;">
<ol>
<li><b>Google</b> - described in the <a href="http://code.google.com/apis/maps/documentation/overlays.html#Google_Maps_Coordinates">
Google Maps API documentation</a></li>
<li><b>TMS</b> an variant of Google tile addressing, which is used in open-source projects like OpenLayers or TileCache. This system is described in the <a href="http://wiki.osgeo.org/wiki/Tile_Map_Service_Specification">
OSGEO Tile Map Service (TMS) Specification</a></li>
<li><b>QuadTree</b> - with documentation in the <a href="http://msdn.microsoft.com/en-us/library/bb259689.aspx">

Virtal Earth Tile System</a> from Microsoft</li>
</ol>
</div>
<p align="left">
<a href="http://www.maptiler.org/">MapTiler/GDAL2Tiles</a> (the tile generator application) is following the TMS specification, because 
there is not any standard for tiling yet, OGC (Open Geospatial Consorcium) is working on the WMTS (Web Map Tiling Service) which is inspired by TMS.
<!--
	<h2>Tile info for Latitude, Longitude and Zoom Level</h2>
	<p>
	Tiling the world (tile names on a picture are in quadtree format)
<img src="http://i.msdn.microsoft.com/Bb259689.5cff54de-5133-4369-8680-52d2723eb756(en-us,MSDN.10).jpg"/>
	<p>
-->
	<h2>Spherical Mercator EPSG:900913 (EPSG:3857) and WGS84 Datum</h2>
	<p align="left">
	The coordinates you use in the Google Maps API and which are presented to the users 
is Latitude/Longitude in WGS84 Datum (when directly projected by Platte Carre then it is referenced as EPSG:4326).<br/>

	But for map publishing in the form compatible with all the popular interactive maps and especially for ground tile overlays you need to use Mercator map projection. Interactive web maps are using "<a href="http://docs.openlayers.org/spherical_mercator/">Spherical Mercator</a>" system which uses Mercator projection on the sphere instead of WGS84 ellipsoid. It is defined as EPSG:900913 or EPSG:3857 (deprecated EPSG:3785). Details about <a href="http://msdn.microsoft.com/en-us/library/bb259689.aspx">this system</a> are part of Virtual Earth documentation as well as <a href="http://docs.openlayers.org/">OpenLayers documentation</a>. Exact numeric definition for GIS systems (in formats like WKT or Proj4), is available in the 
	<a href="http://spatialreference.org/ref/user/google-projection/">SpatialReference.org</a> on-line database.
	<p>
	<h2>Links ...</h2>
        <a href="http://www.youtube.com/watch?v=IYqfT9i1las">Video: Creating Custom Maps with John Coryat</a><p/>

	<a href="http://www.sharpgis.net/post/2007/05/05/Spatial-references2c-coordinate-systems2c-projections2c-datums2c-ellipsoids-e28093-confusing.aspx">Spatial references, coordinate systems, projections, datums, ellipsoids – confusing?</a>
	<p>
	<img src="/img/poster-coordinates.gif" alt="Text from the poster"/>
	<p>
	<h2>Source code for utility calculating tile bounds</h2>
	<p>
	I wrote a class GlobalMercator implementing all necessary coordinate system conversions in Python. The class is documented and quite straightforward.<br/>

	<p>
	You can also download the source code <a href="globalmaptiles.py">globalmaptiles.py</a> and run it as a command line utility. It prints the list of tiles for given WGS84 lat/lon coordinates (or bounding box). For each tile several information is printed including boundaries in EPSG:900913 and WGS84:<br>
	<pre>
	python globalmaptiles.py [zoom] [lat] [lon] 
	</pre>
	<p>
	<iframe src="globalmaptiles.py.html" width="950" height="500">
	   <a href="globalmaptiles.py.html">globalmaptiles.py.html</a>
        </iframe>

	<p>
	<small>Copyright © 2008 <a href="http://www.klokan.cz/">Klokan Petr Přidal</a>
	</div>
	
	<script type="text/javascript">
	var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
	document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
	</script>
	<script type="text/javascript">
	var pageTracker = _gat._getTracker("UA-241776-10");
	pageTracker._trackPageview();
	</script>
	</body>
</html>


