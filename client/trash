	'pullMiniMap' : function(){
	
	$.ajax({		
			url: woa_server + "ants/minimap",
			context: $('#bigMap'),
			type:'POST',
			success: function(data){			
				var bigMap = $('#bigMap');
				bigMap.children().each(function(){
					$(this).data('exists', false);						
				});					
				$.each(data, function(i, ant){					
					// set mini Ant
					var miniAnt = $('#miniAnt_' + ant.uniqueID);
					if (miniAnt.length == 0)
					{
						bigMap.append('<div id="miniAnt_' + ant.uniqueID + '" class="miniAnt"></div>')					
						miniAnt = $('#miniAnt_' + ant.uniqueID);
					}
					
					miniAnt.data('exists', true);
					miniAnt.css('left', ant.x / camera.worldMaxSize.x * camera.miniMapSize);
					miniAnt.css('top', ant.y / camera.worldMaxSize.y * camera.miniMapSize);
									
				});
				$('#miniMap').data('exists', true);				
				var bigMapChildrenAfter = bigMap.children();
				bigMapChildrenAfter.each(function(){
					if ($(this).data('exists') == false)
						$(this).remove();
				});										

			}	
	});	
	},

	'pullAnts' : function(){
		$.ajax({
				url: woa_server + "ants/screen",
				context: $('#mainScreen'),
				type:'POST',
				data : {
					'camera': camera
				},
				success: function(data){				
					var mainScreen = $('#mainScreen');
					
					var ctx = mainScreen[0].getContext('2d');
					ctx.canvas.width  = mainScreen.width();
					ctx.canvas.height = mainScreen.height();					
					ctx.clearRect(0, 0, mainScreen.width(), mainScreen.height());		

					var imgObj = new Image();
					imgObj.src='/media/img/ant.gif';	
//					imgObj.onload = function () {			
//						// Draw the image on the canvas
//						
//					}					
//					ctx.fillStyle = "rgb(200,200,0)";
//					ctx.fillRect (5, 100, 50, 50);					
					
					var mainScreenChildrenBefore = mainScreen.children();
					mainScreenChildrenBefore.each(function(){
						$(this).data('exists', false);						
					});

					var w = 20 / camera.worldZoomLevel;
					var h = 20 / camera.worldZoomLevel;					
					$.each(data, function(i, ant){
						var x = ant.drawPosition.x;
						var y = ant.drawPosition.y;
						var antOld = $('#ant_' + ant.uniqueID);
						
						
//							ctx.moveTo(x, y);
							
													
						if (antOld.length == 0){
							
							//mainScreen.append('<img id="ant_' + ant.uniqueID + '" src="/media/img/ant.gif" class="ant"/>');
							// set Ant							
							antOld = $('#ant_' + ant.uniqueID);
//							antOld.hover(function(event){
//								var info = $('#info_' + ant.uniqueID);
//								if (info.length > 0){
//									console.log('on');
//									info.data('exists', true);
//								}
//							});

//							antOld.draggable({ 
//								containment: "#mainScreen",
//							});
							
							antOld.mouseout(function(event){
								var info = $('#info_' + ant.uniqueID);
								info.remove();
							});
							
							antOld.mouseover(function(event){
							
								var info = $('#info_' + ant.uniqueID);
								if (info.length == 0){
									info = $('<div class="info" id="info_' + ant.uniqueID + '">' + getAntInfo($(this)) + '</div>');
									$(this).parent().append(info);										
								}							
								info.css('left', event.pageX);
								info.css('top', event.pageY);								
								info.data('persistent', true);
								$(this).css('cursor', 'help');
							});						
//							antOld.click(function(event){							
//								antOld.parent().append('<div class="info" style="top:' + event.pageY + ';left:'+ event.pageX + '">' + getAntInfo(antOld) + '</div>');									
//								antOld.css('border-color', 'red');
//							});						
						}
						antOld.data('exists', true);
						antOld.data('antInfo', ant);
						antOld.width(w);
						antOld.height(h);
						antOld.css('left', x);
						antOld.css('top', y);					
														
						ctx.fillRect ( x, y, w, h);						
//						drawImageUsingRotation(ctx, x, y, w, h, 45, imgObj);
//						var r = setDirection(ant, antOld);
//						r =  r * Math.PI / 180
//						r = 45;
//						ctx.translate(ctx.canvas.width / 2, ctx.canvas.height / 2);
						//ctx.translate(camera.translateX, camera.translateY);
//						ctx.rotate(r);
//						ctx.fillStyle = "rgb(200,200,0)";
//						ctx.fillRect (50, 50, w, h);
//						ctx.rotate(-r);
						
//						ctx.drawImage(imgObj, x, y, w, h);
//						
//						ctx.translate(-ctx.canvas.width / 2, -ctx.canvas.height / 2);						
//						ctx.rotate(-r);
//						ctx.translate(-camera.translateX, -camera.translateY);						
//						ctx.fillStyle = "rgb(200,200,0)";
//						ctx.fillRect (x, y, w, h);

					});
					
					
					var mainScreenChildrenAfter = mainScreen.children();
					mainScreenChildrenBefore.each(function(){
						if ($(this).data('persistent') == true) return;
						
						if ($(this).data('exists') == false){							
							$(this).remove();
						}						
					});
				}
		});	
	},
	
	
	
	getTILE !!>>>
	
	var id = coord.x + '_' + coord.y;//this.tileSize.width + '_' + this.tileSize.height;//coord.replace(' ', '_');
//	id = id.replace(',', '');
//	console.log(id);
  div.id = id;
  //allTiles(div);

  //$(div).append('<div></div>');
var numTiles = 1 << map.getZoom();
//console.log(zoom);


//var pixel = {'x': , 'y' : };
//+ w * i % 2
// * 2 ^ zoom + h * Math.floor(i / 2)

//var latlng = google.maps.LatLng(,-87.6500523)
var currentProjection = map.getProjection();
//var tile = new google.maps.Point();
//var point = new google.maps.Point();
//var zoom = map.getZoom();
//point = currentProjection.fromLatLngToPixel(latlng, zoom);
//tile.x = Math.floor(point.x / 256);
//tile.y = Math.floor(point.y / 256);

var tile = coord;
//var boundspixels = tile.x*256 + " " + tile.y*256 + " " + (tile.x+1)*256 + " " + (tile.y+1)*256;

//var boundspixels = tile.x*256 + " " + tile.y*256 + " " + (tile.x+1)*256 + " " + (tile.y+1)*256;

//latlng1 = fromPixelToLatLng(new google.maps.Point(tile.x*256,(tile.y+1)*256));
//latlng2 = fromPixelToLatLng(new google.maps.Point((tile.x+1)*256,tile.y*256));
//var boundswgs84 = latlng1.lng()+" "+latlng1.lat()+"<br/>"+latlng2.lng()+" "+latlng2.lat();
//console.log(boundswgs84);

var w = this.tileSize.width / 2;
var h = this.tileSize.height / 2;

for (var i = 0; i < 4; ++i){
/// numTiles + w * (i % 2)
/// numTiles + h * Math.floor(i / 2)
//var projection = map.getProjection();
////var p = projection.fromPointToLatLng(new google.maps.Point(left, top), zoom);
//var point = new google.maps.Point( coord.x * 2 ^ zoom, coord.y * 2 ^ zoom);
//var latlng = projection.fromPointToLatLng(point, zoom);
//console.log(latlng.toString());

//var left = 0;
//var top = 0;

//	console.log('created : t' + id);
	jQuery('<div/>', {
		  id: 't' + id,
		  css: {
		  	'background-color' : 'cyan',
		  	'display' : 'none',
		  	'position' : 'absolute',
		  	'width' : w,
		  	'height' : h,
		  	'left' : 0,
		  	'top' : 0,    	
		  	'z-index' : '2000'
		  }
	}).appendTo('#tiles');
	allTiles[id] = $('#t' + id);
	
	
	
	
	
	--- TILE TESTS 
	
	function drawTile(ctx, x, y, zX, zY){
	var img = new Image();			
	var newId = zX + x + '_' + zY + y;
//	console.log(newId);
	//var tileLatLng = allTiles[newId];
	var tileLatLng = tileCoordinateToMiddleLatLng({'x' : zX + x, 'y' : zY + y}); //
	if (tileLatLng == null) return;
//	console.log('tile not null');
//	console.log(tileLatLng);
//	var imgUrl = 'http://maps.googleapis.com/maps/api/staticmap?center=' + tileLatLng.lat()+ ','+ tileLatLng.lng()+ '&zoom=21&sensor=false&size=256x256&scale=2';			
	img.src = getMapImage(tileLatLng);
	ctx.drawImage(img, x * camera.worldMaxSize.x, y * camera.worldMaxSize.y, camera.worldMaxSize.x, camera.worldMaxSize.y);

}




----- APPLY CHANGES CAMERA

//		console.log('worldInitX ' + camera.worldInitX);
		
		// unzoom mode
//		if (camera.worldZoomLevel * camera.zoomFactor >= camera.worldMaxSize.x / camera.worldInitX){
//			camera.draw(camera);
//			console.log(camera.zoomFactor);

//			console.log(zoomFactorCanvasContainer);
//			return;

//			var zoomFactorCanvasContainer = 1.2;
//			if (camera.zoomFactor > 1) zoomFactorCanvasContainer = 0.8; 
//			var w = $('#mainScreen').width() * zoomFactorCanvasContainer;			
//			console.log('too big');
//			if (w < 512) { // too small
//				w = 512;		
////				$('#mainScreen').css('width',  w + 'px');			
//				return;			
//			} else { 
//				if (w > camera.worldInitX){ // too big shoud switch
//					w = camera.worldInitX;
//				} else { // unzoom area
//					//return;
//				}
//			} 
//			$('#mainScreen').css('width',  w + 'px');
//			return;
//		}
		


			// update the camera
		
		
			var gapX = 0;
			var gapY = 0;
			var projectionZoomLevel = camera.worldZoomLevel * camera.zoomFactor;
			//projectionZoomLevel >= camera.worldMaxSize.x / camera.worldInitX | 
			//projectionZoomLevel >= camera.worldMaxSize.y / camera.worldInitY
			if (projectionZoomLevel >= camera.worldMaxSize.x / camera.worldInitX || projectionZoomLevel >= camera.worldMaxSize.y / camera.worldInitY){

				//var zoomDiff = projectionZoomLevel - camera.worldMaxSize.x / camera.worldInitX;

//				var tX = camera.worldInitX * projectionZoomLevel - camera.worldMaxSize.x;
//				var tY = camera.worldInitY * projectionZoomLevel - camera.worldMaxSize.y;				
				//tX = tX / 2;
//				camera.tX = (tX / (camera.worldInitX * projectionZoomLevel)) * camera.worldInitX / 2;
//				camera.tY = (tY / (camera.worldInitY * projectionZoomLevel)) * camera.worldInitY  / 2;
//				console.log(camera);
//				var gapX = ((camera.translateX / camera.worldMaxSize.x) * (camera.worldMaxSize.x / projectionZoomLevel) / 2);
//				var gapY = ((camera.translateY / camera.worldMaxSize.y) * (camera.worldMaxSize.y / projectionZoomLevel) / 2);
//				console.log('translateHere(gap) : ' + gapX + ', ' + gapY);
//				camera.tX -= gapX; 
//				camera.tY -= gapY;
//				camera.traX -= gapX;
//				camera.traY -= gapY;				
				
				if (camera.ScreenSize.h < camera.worldMaxSize.y) {
					

//					camera.traX = camera.tX;
						//gapX = camera.translateX;
						//gapY = camera.translateY;
//					camera.traY = camera.tY;					
				}		
			} else {
//				camera.tX = -camera.translateX  / projectionZoomLevel;
//				camera.tY = -camera.translateY  / projectionZoomLevel;
//				mainScreen.css('background-position', camera.tX +  "px " + camera.tY + 'px');						
			}
			
		
//			camera.translateX += camera.tX;
//			camera.translateY += camera.tY;		
			//var bgPosition = camera.tX +  "px " + camera.tY + 'px';
			//console.log('background-position : ' + bgPosition);
			//mainScreen.css('background-position', bgPosition);								
					

			// do the zoom
	
			
			// update translations
			camera.translateX += camera.traX;
			camera.translateY += camera.traY;
			
//			console.log('transtalte zoom  : ' + camera.trX + ', ' + camera.trY);
			//camera.translateX -= camera.trX * camera.mousePourcentagePosition.x;
			//camera.translateY -= camera.trY * camera.mousePourcentagePosition.y;					
			
			// update the size	
			camera.ScreenSize.w = $('#mainScreen').width() * camera.worldZoomLevel;
			camera.ScreenSize.h = $('#mainScreen').height() * camera.worldZoomLevel;
		
//			 limit the size if the screen is too small	
			if (camera.ScreenSize.w > camera.worldMaxSize.x) camera.ScreenSize.w = camera.worldMaxSize.x;
			if (camera.ScreenSize.h > camera.worldMaxSize.y) camera.ScreenSize.h = camera.worldMaxSize.y;			
			// limit the translate to don't go more than the max size
			if (camera.translateX + camera.ScreenSize.w > camera.worldMaxSize.x){
				camera.translateX = 0;//-= camera.translateX + camera.ScreenSize.w - camera.worldMaxSize.x;
			}
			if (camera.translateY + camera.ScreenSize.h > camera.worldMaxSize.y){
				camera.translateY = camera.worldMaxSize.y - camera.ScreenSize.h;
			}		
			if (camera.translateX <= 0) camera.translateX = 0;
			if (camera.translateY <= 0) camera.translateY = 0;	

//			var bgWidth = camera.worldMaxSize.x (camera.ScreenSize.w  / camera.worldMaxSize.x) * camera.worldMaxSize.x;
//			var bgHeight = (camera.ScreenSize.h  / camera.worldMaxSize.y) * camera.worldMaxSize.y;
				
//			mainScreen.css('background-position', -camera.translateX  / camera.worldZoomLevel + "px " + -camera.translateY / camera.worldZoomLevel + "px");
			//mainScreen.css('background-size', camera.worldMaxSize.x / camera.worldZoomLevel);
			// do canvas translations
			//ctx.translate(camera.traX, camera.traY);
			// do the canvas zoom
	

//			console.log(camera);
			console.log('translate : ' + camera.translateX +  "px " + camera.translateY + 'px');
			// update mini map
			
		
			 
			//var miniMapLeft = (camera.translateX / camera.worldMaxSize.x) * camera.miniMapSize;
			//var miniMapTop = (camera.translateY / camera.worldMaxSize.y) * camera.miniMapSize;
			if (miniMapWidth <= camera.miniMapSize) $('#miniMap').width(miniMapWidth);
			if (miniMapHeight <= camera.miniMapSize) $('#miniMap').height(miniMapHeight);
			
			
			if (miniMapLeft + miniMapWidth > camera.worldMaxSize.x){
				miniMapLeft -= miniMapLeft + miniMapWidth - camera.worldMaxSize.x;
			}
			$('#miniMap').css('left', miniMapLeft);
			$('#miniMap').css('top', miniMapTop);		
			
	
			
			//var ctx = $("#mainScreen")[0].getContext('2d');				
			camera.trX = 0;
			camera.trY = 0;
			camera.mousePositionPourcentage = {};
			camera.zoomFactor = 1;
			camera.traX = 0;
			camera.traY = 0;
			 
			camera.draw(camera);
